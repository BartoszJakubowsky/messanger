// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token_expires_in Int? //github 
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id   String  @id @default(uuid())
    name String?

    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]

    // Non-Next Auth
    conversations Conversation[]
    messages      Message[]
    theme         String         @default("light")
    description   String         @default("Hey, im new Dumb Messanger user!")
}

model Conversation {
    id           String    @id @default(uuid())
    participants User[]
    messages     Message[]
    createdAt    DateTime  @default(now())
    updatedAt    DateTime  @updatedAt
}

model Message {
    id             String       @id @default(uuid())
    content        String
    userId         String
    conversationId String
    createdAt      DateTime     @default(now())
    conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
    user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([id, createdAt])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
